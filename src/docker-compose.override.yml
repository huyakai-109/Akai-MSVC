version: '3.8'

services:
  #database section
  
  #orderdb: sql server
  orderdb:
    container_name: orderdb
    environment:
      SA_PASSWORD: "Passw0rd!"
      ACCEPT_EULA: "Y"
    restart: always
    volumes:
      - sqlserver_data:/var/lib/sqlserver/data
    ports:
      - "1435:1433"
  
  #productdb: mysql      
  productdb:
    container_name: productdb
    environment:
      MYSQL_ROOT_PASSWORD: "Passw0rd!"
    restart: always
    volumes:
      - mysql_data:/var/lib/mysqldb
    ports:
      - "3306:3306"
  
  #customerdb: postgres
  customerdb:
    container_name: customerdb
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=admin1234
      - POSTGRES_DB=CustomerDb
    restart: always
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
  
  #basketdb: redis
  basketdb:
    container_name: basketdb
    restart: always
    ports:
      - "6379:6379"
  
  #inventorydb: mongo
  inventorydb:
    container_name: inventorydb
    restart: always
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db

  #infrastructure section
  rabbitmq:
    container_name: rabbitmq
    restart: always
    ports:
      - "5672:5672"
      - "15672:15672"
  
  pgadmin:
    container_name: pgadmin
    environment:
      - PGADMIN_DEFAULT_EMAIL=nhuthuy12tn1@gmail.com
      - PGADMIN_DEFAULT_PASSWORD=admin1234
    restart: always
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/root/.pgadmin
  
  portainer:
    container_name: portainer
    restart: always
    ports:
      - "8080:8080"
      - "9000:9000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
  
  elasticsearch:
    container_name: elasticsearch
    environment:
      - xpack.monitoring.enabled=true
      - xpack.watcher.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - discovery.type=single-node
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
  
  kibana:
    container_name: kibana
    environment:
      - ELASTICSEARCH_URL=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    ports:
      - "5601:5601"

  minio:
    container_name: akai.minio 
    ports:
      #- "9000:9000"
      - "9001:9001"
    volumes:
      - ./storage:/data
    environment:
      - MINIO_ROOT_USER=admin
      - MINIO_ROOT_PASSWORD=Password@1234
    command: server --console-address ":9001" /data

  #microservices api section
  product.api:
    container_name: product.api
    environment:
     - ASPNETCORE_ENVIRONMENT=Development
     - ASPNETCORE_URLS=http://+:8080
     - "ConnectionStrings:MyDatabase=Server=productdb;Port=3306;Database=ProductDB;User Id=root;Password=Passw0rd!"
    depends_on:
     - productdb
    ports:
     - "6002:8080"
    restart: always

  customer.api:
    container_name: customer.api
    environment:
     - ASPNETCORE_ENVIRONMENT=Development
     - ASPNETCORE_URLS=http://+:8080
     - "ConnectionStrings:CustomerDb=Server=customerdb;Port=5432;Database=CustomerDB;Username=admin;Password=admin1234"
    depends_on:
     - customerdb
    ports:
     - "6003:8080"
    restart: always
    ## Trong docker-compose.yml, container customer.api và customerdb chạy cùng một network.
    ## Khi customer.api kết nối đến customerdb, nó sử dụng tên container customerdb làm hostname (Server=customerdb)
    ## PostgreSQL bên trong container đang lắng nghe trên cổng 5432 (cổng mặc định)
    ## Dùng Port=5432 trong connection string của customer.api vì nó kết nối trực tiếp đến customerdb bên trong Docker network.
    ## Dùng Port=5433 nếu bạn kết nối từ máy host (ví dụ: bằng pgadmin4, Navicat).

  basket.api:
    container_name: basket.api
    environment:
     - ASPNETCORE_ENVIRONMENT=Development
     - ASPNETCORE_URLS=http://+:8080
     - "ConnectionStrings:RedisConnection=basketdb:6379"
    depends_on:
     - basketdb
    ports:
     - "6004:8080"
    restart: always